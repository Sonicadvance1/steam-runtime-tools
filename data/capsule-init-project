#!/bin/bash

set -e;
set -u;

libexec=$(dirname $0);
me=$(basename $0);

usage ()
{
cat << EOF
Usage: $me [OPTIONS] TARGET [TREE [PROJECT-NAME]]
    Options:
        --capsule-pkgdatadir=PATH
                                Use supporting files from PATH
                                [default: libcapsule's \${pkgdatadir}]
        --capsule-symbols-tool=PATH
                                Use replacement capsule-symbols(1)
                                [default: ${CAPSULE_SYMBOLS_TOOL:-"$libexec/capsule-symbols"}]
        --capsule-version-tool=PATH
                                Use replacement capsule-version(1)
                                [default: ${CAPSULE_VERSION_TOOL:-"$libexec/capsule-version"}]
        --search-tree=PATH      Find libraries to be proxied in this
                                chroot, sysroot or container now
                                [default: TREE or /]
        --runtime-tree=PATH     Generated code will find proxied
                                libraries in this chroot, sysroot or
                                container at runtime if CAPSULE_PREFIX
                                is unset [default: TREE or /host]
    Positional parameters:
        TARGET                  SONAME of the library to be proxied
        TREE                    Default for both --search-tree and
                                --runtime-tree [default: /host]
        PROJECT-NAME            Project to create [default: libfoo-proxy]
EOF
    exit "${1:-0}"
}

getopt_temp="$(getopt -o 'h' \
    -l 'capsule-pkgdatadir,capsule-symbols-tool,capsule-version-tool,search-tree:,runtime-tree:,help' \
    -n "$me" -- "$@")"
eval set -- "$getopt_temp"

runtime_tree=
search_tree=

while true;
do
    case "$1" in
        (--help|-h)
            usage 0;
            ;;

        (--capsule-pkgdatadir)
            CAPSULE_MKINC="$2"
            shift 2;
            continue;
            ;;

        (--capsule-symbols-tool)
            CAPSULE_SYMBOLS_TOOL="$2"
            shift 2;
            continue;
            ;;

        (--capsule-version-tool)
            CAPSULE_VERSION_TOOL="$2"
            shift 2;
            continue;
            ;;

        (--runtime-tree)
            runtime_tree="$2"
            shift 2;
            continue;
            ;;

        (--search-tree)
            search_tree="$2"
            shift 2;
            continue;
            ;;

        (--)
            shift;
            break;
            ;;
        (*)
            echo "$me: Internal error" >&2;
            usage 2 >&2;
            ;;
    esac
done

if [ "$#" -lt 1 ] || [ "$#" -gt 3 ];
then
    usage 2 >&2;
fi;

target=$1;
tree=${2:-/host};

base=${target%%.so.*};
base=${base%.so};
name=${base#lib};
lcbase=${base,,};

dest=${3:-$base-proxy};
ver=0;
maj=0;

: "${CAPSULE_MKINC:="$(pkg-config --variable=makeinc capsule)"}"
: "${CAPSULE_SYMBOLS_TOOL:="$libexec/capsule-symbols"}"
: "${CAPSULE_VERSION_TOOL:="$libexec/capsule-version"}"
: "${runtime_tree:="$tree"}"
: "${search_tree:="$tree"}"

read x x ver x < <("$CAPSULE_VERSION_TOOL" "$target" "$search_tree");

maj=${ver%%.*};

echo Generating project for $runtime_tree : $target $ver proxy;

echo Creating project directory $dest;

mkdir -p "$dest";
cd $dest;
mkdir -p shim;

echo Working in $PWD;

escaped_target="$(echo "$target" | sed -e 's/\\/\\\\/g' -e 's/,/\\,/g')"
escaped_lib="$(echo "$name" | sed -e 's/\\/\\\\/g' -e 's/,/\\,/g')"
escaped_search_tree="$(echo "$search_tree" | sed -e 's/\\/\\\\/g' -e 's/,/\\,/g')"
escaped_runtime_tree="$(echo "$runtime_tree" | sed -e 's/\\/\\\\/g' -e 's/,/\\,/g')"
sed \
    -e "1,/^\$/d" \
    -e "s,@TARGET@,$escaped_target," \
    -e "s,@LIB@,$escaped_lib," \
    < "$CAPSULE_MKINC/shim-README.in" \
    > README;

echo Extracting dynamic symbols from $search_tree : $target;

"$CAPSULE_SYMBOLS_TOOL" "$target" "$search_tree" > "shim/$target.symbols.tmp";
LC_ALL=C sort -u "shim/$target.symbols.tmp" > "shim/$target.symbols";
rm -f "shim/$target.symbols.tmp";
touch "shim/$target.symbols.updated-for";

echo Preparing proxy source files
touch shim/$target.{shared,excluded};

echo Initialising configure.ac;

sed \
    -e "1,/^\$/d" \
    -e "s,@TARGET@,$escaped_target," \
    -e "s,@LIB@,$escaped_lib," \
    -e "s,@RUNTIME_TREE@,$escaped_runtime_tree," \
    -e "s,@SEARCH_TREE@,$escaped_search_tree," \
    -e "s,@LCBASE@,$lcbase," \
    -e "s,@VER@,$ver," \
    < "$CAPSULE_MKINC/shim-configure.ac.in" \
    > configure.ac;

echo Initialising Makefile.am;

sed \
    -e "1,/^\$/d" \
    -e "s,@TARGET@,$escaped_target," \
    -e "s,@LIB@,$escaped_lib," \
    -e "s,@RUNTIME_TREE@,$escaped_runtime_tree," \
    -e "s,@SEARCH_TREE@,$escaped_search_tree," \
    -e "s,@LCBASE@,$lcbase," \
    -e "s,@VER@,$ver," \
    < "$CAPSULE_MKINC/shim-Makefile.am" \
    > Makefile.am;

echo Bootstrapping autoconf templates for $target;

############################################################################
# this stage generates the capsule-shim.mk from a template, which
# we need to be in place before we generate the _real_ Makefile.in:
if ! (autoreconf -if;
 ./configure --with-runtime-tree="$tree" --with-search-tree="$tree";
 sed -i -re 's@##(include .*)##@\1@' Makefile.am) > preconfigure.log 2>&1;
then
    cat preconfigure.log
    exit 1
fi
############################################################################

echo Running initial configuration;
autoreconf -ivf

cp "$CAPSULE_MKINC/shim-.gitignore" .gitignore

cat - <<EOF
$PWD is ready for ./configure, see README for details.

You will probably want to add the following files to your version
control system:

Makefile.am
README
configure.ac
shim/$target.excluded
shim/$target.shared
shim/$target.symbols
shim/$target.symbols.updated-for
EOF
