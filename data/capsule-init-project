#!/bin/bash

set -e;
set -u;

libexec=$(dirname $0);
me=$(basename $0);

usage ()
{
cat << EOF
Usage: $me [OPTIONS] TARGET [TREE [PROJECT-NAME]]
    Options:
        --capsule-pkgdatadir=PATH
                                Use supporting files from PATH
                                [default: libcapsule's \${pkgdatadir}]
        --capsule-symbols-tool=PATH
                                Use replacement capsule-symbols(1)
                                [default: ${CAPSULE_SYMBOLS_TOOL:-"$libexec/capsule-symbols"}]
        --capsule-version-tool=PATH
                                Use replacement capsule-version(1)
                                [default: ${CAPSULE_VERSION_TOOL:-"$libexec/capsule-version"}]
    Positional parameters:
        TARGET                  SONAME of the library to be proxied
        TREE                    Chroot or container to find libraries in,
                                both now and at runtime [default: /host]
        PROJECT-NAME            Project to create [default: libfoo-proxy]
EOF
    exit "${1:-0}"
}

getopt_temp="$(getopt -o 'h' \
    -l 'capsule-pkgdatadir,capsule-symbols-tool,capsule-version-tool,help' \
    -n "$me" -- "$@")"
eval set -- "$getopt_temp"

while true;
do
    case "$1" in
        (--help|-h)
            usage 0;
            ;;

        (--capsule-pkgdatadir)
            CAPSULE_MKINC="$2"
            shift 2;
            continue;
            ;;

        (--capsule-symbols-tool)
            CAPSULE_SYMBOLS_TOOL="$2"
            shift 2;
            continue;
            ;;

        (--capsule-version-tool)
            CAPSULE_VERSION_TOOL="$2"
            shift 2;
            continue;
            ;;

        (--)
            shift;
            break;
            ;;
        (*)
            echo "$me: Internal error" >&2;
            usage 2 >&2;
            ;;
    esac
done

if [ "$#" -lt 1 ] || [ "$#" -gt 3 ];
then
    usage 2 >&2;
fi;

target=$1;
tree=${2:-/host};

base=${target%%.so.*};
base=${base%.so};
name=${base#lib};
lcbase=${base,,};

dest=${3:-$base-proxy};
ver=0;
maj=0;

: "${CAPSULE_MKINC:="$(pkg-config --variable=makeinc capsule)"}"
: "${CAPSULE_SYMBOLS_TOOL:="$libexec/capsule-symbols"}"
: "${CAPSULE_VERSION_TOOL:="$libexec/capsule-version"}"

read x x ver x < <("$CAPSULE_VERSION_TOOL" "$target" "$tree");

maj=${ver%%.*};

echo Generating project for $tree : $target $ver proxy;

echo Creating project directory $dest;

mkdir -p "$dest";
cd $dest;
mkdir -p shim;

echo Working in $PWD;

escaped_target="$(echo "$target" | sed -e 's/\\/\\\\/g' -e 's/,/\\,/g')"
escaped_lib="$(echo "$name" | sed -e 's/\\/\\\\/g' -e 's/,/\\,/g')"
escaped_tree="$(echo "$tree" | sed -e 's/\\/\\\\/g' -e 's/,/\\,/g')"
sed \
    -e "1,/^\$/d" \
    -e "s,@TARGET@,$escaped_target," \
    -e "s,@LIB@,$escaped_lib," \
    -e "s,@TREE@,$escaped_tree," \
    < "$CAPSULE_MKINC/shim-README.in" \
    > README;

echo Extracting dynamic symbols from $tree : $target;

"$CAPSULE_SYMBOLS_TOOL" "$target" "$tree" > "shim/$base.so.symbols.tmp";
LC_ALL=C sort -u "shim/$base.so.symbols.tmp" > "shim/$base.so.symbols";
rm -f "shim/$base.so.symbols.tmp";

echo Preparing proxy source files
touch shim/$base.so.c.{shared,excluded};

echo Initialising configure.ac;

sed \
    -e "1,/^\$/d" \
    -e "s,@TARGET@,$escaped_target," \
    -e "s,@LIB@,$escaped_lib," \
    -e "s,@TREE@,$escaped_tree," \
    -e "s,@LCBASE@,$lcbase," \
    -e "s,@VER@,$ver," \
    -e "s,@MAJ@,$maj," \
    < "$CAPSULE_MKINC/shim-configure.ac.in" \
    > configure.ac;

echo Initialising Makefile.am;

cat - <<EOF > Makefile.am
CAPSULE_LIBRARY := $name
CAPSULE_VERSION := $ver
CAPSULE_TREE    := $tree
CAPSULE_MAJOR   := $maj
#AM_CAPSULE_MKSTUBLIB_FLAGS := --ext-dlopen --ext-dlsym

include @CAPSULE_MKINC@/disabled.mk
##include capsule-shim.mk##
EOF

echo Bootstrapping autoconf templates for $target;

############################################################################
# this stage generates the capsule-shim.mk from a template, which
# we need to be in place before we generate the _real_ Makefile.in:
if ! (autoreconf -if;
 ./configure;
 sed -i -re 's@##(include .*)##@\1@' Makefile.am) > preconfigure.log 2>&1;
then
    cat preconfigure.log
    exit 1
fi
############################################################################

echo Running initial configuration;
autoreconf -ivf

echo $PWD is ready for ./configure, see README for details;

