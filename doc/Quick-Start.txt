In the top level directory:

  autoreconf -ivf
  ./configure
  make

libcapsule.so will be in .libs/

The test environment is currently:

A chroot containing a debian/jessie filesystem with libGL.so removed,
the libcapsule .deb installed and with the "real" OS filesystem bind
mounted at /host.

In the chroot:

Generate a proxy project for libGL:

  ~$ $(pkg-config --variable=CAPSULE_INIT_PROJECT_TOOL capsule) libGL.so.1 /host
  ~$ cd libGL-proxy
  ~$ extralib=".so.1 -glx.so.0 -dri2.so.0 -dri3.so.0 -present.so.0 -sync.so.1"
  ~$ echo -n > shim/libGL.so.c.shared
  ~$ for x in $extralib; do echo libxcb$x >> shim/libGL.so.c.shared; done
  ~$ echo libX11.so >> shim/libGL.so.c.shared;
  ~$ ./configure
  ~$ make

Copy the generated libGL.so into an appropriate directory.

Ensure that ldd $(which glxgears) points to the libGL.so capsule

Make sure a full filesystem from the host OS is mounted at /host

Make sure your chroot is set up so that trivial XOrg programs can run
(xterm, xev, xeyes or whatever).

Run glxgears.

If it fails:

 export CAPSULE_DEBUG=path,search,capsule,mprotect,wrappers,ldcache
 glxgears 2>&1 | tee glxgears.capsule.log

capsule debug flags: 
  path     # path manipulation and translation
  search   # searching for DSOs
  ldcache  # loading/processing the ld cache
  capsule  # setting up the proxy capsule
  mprotect # handling mprotect (for RELRO)
  wrappers # function wrappers installed in the capsule
  reloc    # patching capsule symbols into external DSOs
  elf      # detailed ELF introspection logging

TODO: add instructions for bwrap instead of chroot here.
